import os
from re import search
import getpass


############
## Config ##
############

host = os.uname()[1]
if search("BI2404M", host) and getpass.getuser()=="argelagr":
    configfile: "config_ricard_local.yaml"
elif search("[headstone|pebble]", host) and getpass.getuser()=="argelagr":
    configfile: "config_ricard_babraham.yaml"
elif search("[headstone|pebble]", host) and getpass.getuser()=="stephen":
    configfile: "config_stephen_babraham.yaml"
else:
    print("Computer not recognised")
    exit()

# validate(config, schema="schemas/config.schema.yaml")

###########
## Rules ##
###########

rule all:
    input: 
        config["directories"]["processed_data"]+"/seurat.rds",
        config["directories"]["results"]+"/qc/sample_metadata_after_qc.txt.gz",
        config["directories"]["processed_data"]+"/SingleCellExperiment.rds",
        # expand("%s/doublet_detection_seurat/doublets_{sample}.txt.gz" % config["directories"]["results"], sample=config["samples"]),
        # config["directories"]["results"]+"/doublet_detection_seurat/sample_metadata_after_doublets.txt.gz",
        expand("%s/mapping/mapping_mnn_{sample}.txt.gz" % config["directories"]["results"], sample=config["samples"]),
        config["directories"]["results"]+"/mapping/sample_metadata_after_mapping.txt.gz",
        config["directories"]["results"]+"/mapping/pdf/completed.txt",
        config["directories"]["results"]+"/celltype_proportions/completed.txt",
        config["directories"]["results"]+"/celltype_proportions/comparisons/completed.txt",
        expand("%s/dimensionality_reduction/sce/{classe}/completed.txt" % config["directories"]["results"], classe=config["classes"]),
        expand("%s/dimensionality_reduction/seurat/{classe}/completed.txt" % config["directories"]["results"], classe=config["classes"]),
        config["directories"]["results"]+"/sex_assignment/sample_metadata_after_sex_assignment.txt.gz",
        config["directories"]["results"]+"/sex_assignment/sex_assignment.txt.gz"

##################################################
## Load count matrices and create Seurat object ##
##################################################

rule create_seurat:
    input:
        script = config["scripts"]["create_seurat"],
        inputdir = config["directories"]["original_data"]
    output:
        seurat = config["directories"]["processed_data"]+"/seurat.rds",
        metadata = config["directories"]["processed_data"]+"/metadata.txt.gz"
    params:
        samples = expand("{sample}", sample=config["samples"]),
        outdir = config["directories"]["processed_data"]
    conda:
        "environment.yaml"
    log: 
        "logs/create_seurat.log"
    threads: 
        config["slurm"]["create_seurat"]["threads"]
    resources:
        mem_mb = config["slurm"]["create_seurat"]["memory"]
    shell:
        "Rscript {input.script} --inputdir {input.inputdir} --outdir {params.outdir} --samples {params.samples} > {log}"

#####################
## Quality control ##
#####################

rule qc:
    input:
    	metadata=rules.create_seurat.output.metadata,
        # metadata = config["directories"]["processed_data"]+"/metadata.txt.gz",
        script = config["scripts"]["qc"]
    output:
        config["directories"]["results"] +"/qc/sample_metadata_after_qc.txt.gz"
    params:
        min_nFeature_RNA = config["params"]["qc"]["min_nFeature_RNA"],
        max_nFeature_RNA = config["params"]["qc"]["max_nFeature_RNA"],
        percent_mt = config["params"]["qc"]["percent_mt"],
        percent_rib = config["params"]["qc"]["percent_rib"],
        outdir = config["directories"]["results"]+"/qc"
    conda:
        "environment.yaml"
    log: 
        "logs/qc.log"
    threads: 
        config["slurm"]["qc"]["threads"]
    resources:
        mem_mb = config["slurm"]["qc"]["memory"]
    shell:
        "Rscript {input.script} --metadata {input.metadata} --outdir {params.outdir} --min_nFeature_RNA {params.min_nFeature_RNA} \
        --max_nFeature_RNA {params.max_nFeature_RNA} --rib_percent_RNA {params.percent_rib} --mit_percent_RNA {params.percent_mt} > {log}"


###################################################
## Convert Seurat object to SingleCellExperiment ##
###################################################

rule seurat_to_sce:
    input:
        seurat = rules.create_seurat.output.seurat,
        # seurat = config["directories"]["processed_data"]+"/seurat.rds",
    	metadata = rules.qc.output,
        script = config["scripts"]["seurat_to_sce"],
    output:
        config["directories"]["processed_data"]+"/SingleCellExperiment.rds",
    conda:
        "environment.yaml"
    log: 
        "logs/seurat_to_sce.log"
    threads: 
        config["slurm"]["seurat_to_sce"]["threads"]
    resources:
        mem_mb = config["slurm"]["seurat_to_sce"]["memory"]
    shell:
        "Rscript {input.script} --seurat {input.seurat} --metadata {input.metadata} --outfile {output} > {log}"

#######################
## Doublet detection ##
#######################

# THIS RULE SOMETIMES FAILS AND I HAVE NO IDEA WHY
rule doublet_detection:
    input:
        sce = rules.seurat_to_sce.output,
        metadata = rules.qc.output,
        script = config["scripts"]["doublet_detection"]
    output:
        outfile=config["directories"]["results"]+"/doublet_detection/doublets_{sample}.txt.gz"
        # metadata=config["directories"]["results"]+"/doublet_detection/sample_metadata_after_doublet_detection.txt.gz"
    params:
        doublet_score_threshold = config["params"]["doublet_detection"]["doublet_score_threshold"]
    conda:
        "environment.yaml"
    log: 
        "logs/doublet_detection_{sample}.log"
    threads: 
        config["slurm"]["doublet_detection"]["threads"]
    resources:
        mem_mb = config["slurm"]["doublet_detection"]["memory"]
    shell:
        "Rscript {input.script} --metadata {input.metadata} --sce {input.sce} --samples {wildcards.sample} \
        --hybrid_score_threshold {params.doublet_score_threshold}  --outfile {output} > {log}"

rule parse_doublet_results:
    input:
        metadata = rules.qc.output,
        script = config["scripts"]["parse_doublet_results"],
        # doublet_files=expand(config["directories"]["results"]+"/doublet_detection/doublets_{sample}.txt.gz", sample=config["samples"])
        doublet_files = expand(rules.doublet_detection.output, sample=config["samples"])
    output:
        config["directories"]["results"]+"/doublet_detection/sample_metadata_after_doublets.txt.gz"
    params:
        outdir = config["directories"]["results"]+"/doublet_detection"
    conda:
        "environment.yaml"
    log: 
        "logs/parse_doublet_results.log"
    threads: 
        config["slurm"]["parse_doublet_results"]["threads"]
    resources:
        mem_mb = config["slurm"]["parse_doublet_results"]["memory"]
    shell:
        "Rscript {input.script} --metadata {input.metadata} --doublet_files {input.doublet_files} --outdir {params.outdir} > {log}"


rule doublet_detection_seurat:
    input:
        seurat = rules.create_seurat.output.seurat,
        metadata = rules.qc.output,
        script = config["scripts"]["doublet_detection_seurat"]
    output:
        outfile=config["directories"]["results"]+"/doublet_detection_seurat/doublets_{sample}.txt.gz"
    params:
        number_doublets = config["params"]["doublet_detection_seurat"]["number_doublets"]
    conda:
        "environment.yaml"
    log: 
        "logs/doublet_detection_{sample}.log"
    threads: 
        config["slurm"]["doublet_detection_seurat"]["threads"]
    resources:
        mem_mb = config["slurm"]["doublet_detection_seurat"]["memory"]
    shell:
        "Rscript {input.script} --metadata {input.metadata} --seurat {input.seurat} --sample {wildcards.sample} \
        --number_doublets {params.number_doublets}  --outfile {output} > {log}"

rule parse_doublet_results_seurat:
    input:
        metadata = rules.qc.output,
        script = config["scripts"]["parse_doublet_results"],
        # doublet_files=expand(config["directories"]["results"]+"/doublet_detection/doublets_{sample}.txt.gz", sample=config["samples"])
        doublet_files = expand(rules.doublet_detection_seurat.output, sample=config["samples"])
    output:
        config["directories"]["results"]+"/doublet_detection_seurat/sample_metadata_after_doublets.txt.gz"
    params:
        outdir = config["directories"]["results"]+"/doublet_detection_seurat"
    conda:
        "environment.yaml"
    log: 
        "logs/parse_doublet_results_seurat.log"
    threads: 
        config["slurm"]["parse_doublet_results"]["threads"]
    resources:
        mem_mb = config["slurm"]["parse_doublet_results"]["memory"]
    shell:
        "Rscript {input.script} --metadata {input.metadata} --doublet_files {input.doublet_files} --outdir {params.outdir} > {log}"


##########################
## Mapping to the atlas ##
##########################

rule mapping_mnn:
    input:
        atlas_sce = config["directories"]["atlas"]+"/processed/SingleCellExperiment.rds",
    	atlas_metadata = config["directories"]["atlas"]+"/sample_metadata.txt.gz",
        query_sce = rules.seurat_to_sce.output,
        # query_metadata = rules.parse_doublet_results_seurat.output,
        query_metadata = rules.qc.output,
        script = config["scripts"]["mapping_mnn"]
    output:
        config["directories"]["results"]+"/mapping/mapping_mnn_{sample}.txt.gz"
    params:
        atlas_stages = config["params"]["mapping_mnn"]["atlas_stages"],
        npcs = config["params"]["mapping_mnn"]["npcs"],
        n_neighbours = config["params"]["mapping_mnn"]["n_neighbours"]
    conda:
        "environment.yaml"
    log: 
        "logs/mapping_mnn_{sample}.log"
    threads: 
        config["slurm"]["mapping_mnn"]["threads"]
    resources:
        mem_mb = config["slurm"]["mapping_mnn"]["memory"]
    shell:
        "Rscript {input.script} --query_samples {wildcards.sample} --atlas_stages {params.atlas_stages} --query_sce {input.query_sce} \
        --atlas_sce {input.atlas_sce} --atlas_metadata {input.atlas_metadata} --query_metadata {input.query_metadata} \
        --npcs {params.npcs} --n_neighbours {params.n_neighbours} --outfile {output}  > {log}"

# rule mapping_mnn_all_samples:
#     input:
#         atlas_sce = config["directories"]["atlas"]+"/processed/SingleCellExperiment.rds",
#         atlas_metadata = config["directories"]["atlas"]+"/sample_metadata.txt.gz",
#         query_sce = rules.seurat_to_sce.output,
#         # query_metadata=rules.parse_doublet_results.output,
#         query_metadata = rules.qc.output,
#         script = config["scripts"]["mapping_mnn"]
#         # outdir=config["directories"]["results"]+"/mapping"
#     output:
#         config["directories"]["results"]+"/mapping/mapping_mnn_all_samples.txt.gz"
#     params:
#         samples = expand("{sample}", sample=config["samples"]),
#         atlas_stages=config["params"]["mapping_mnn"]["atlas_stages"],
#         npcs = config["params"]["mapping_mnn"]["npcs"],
#         n_neighbours = config["params"]["mapping_mnn"]["n_neighbours"]
#     conda:
#         "environment.yaml"
#     log: 
#         "logs/mapping_mnn_all_samples.log"
#     threads: 
#         config["slurm"]["mapping_mnn"]["threads"]
#     resources:
#         mem_mb = config["slurm"]["mapping_mnn_all_samples"]["memory"]
#     shell:
#         "Rscript {input.script} --query_samples {params.samples} --atlas_stages {params.atlas_stages} --query_sce {input.query_sce} \
#         --atlas_sce {input.atlas_sce} --atlas_metadata {input.atlas_metadata} --query_metadata {input.query_metadata} \
#         --npcs {params.npcs} --n_neighbours {params.n_neighbours} --outfile {output}  > {log}"

rule parse_mapping_results:
    input:
        # query_metadata = rules.parse_doublet_results_seurat.output,
        query_metadata = rules.qc.output,
        mapping_mnn = expand(config["directories"]["results"]+"/mapping/mapping_mnn_{sample}.txt.gz", sample=config["samples"]),
        # mapping_mnn = rules.mapping_mnn.output,
        script = config["scripts"]["parse_mapping"]
    output:
        config["directories"]["results"]+"/mapping/sample_metadata_after_mapping.txt.gz"
    conda:
        "environment.yaml"
    log: 
        "logs/parse_mapping_results.log"
    threads: 
        config["slurm"]["parse_mapping_results"]["threads"]
    resources:
        mem_mb = config["slurm"]["parse_mapping_results"]["memory"]
    shell:
        "Rscript {input.script} --metadata {input.query_metadata} --mapping_mnn {input.mapping_mnn} --outfile {output} > {log}"


# rule parse_mapping_results_all_samples:
#     input:
#         # query_metadata = rules.parse_doublet_results_seurat.output,
#         query_metadata = rules.qc.output,
#         # mapping_mnn = config["directories"]["results"]+"/mapping/mapping_mnn_all_samples.txt.gz",
#         mapping_mnn = rules.mapping_mnn_all_samples.output,
#         script = config["scripts"]["parse_mapping"]
#     output:
#         config["directories"]["results"]+"/mapping/sample_metadata_after_mapping_all_samples.txt.gz"
#     conda:
#         "environment.yaml"
#     log: 
#         "logs/parse_mapping_results.log"
#     threads: 
#         config["slurm"]["parse_mapping_results"]["threads"]
#     resources:
#         mem_mb = config["slurm"]["parse_mapping_results"]["memory"]
#     shell:
#         "Rscript {input.script} --metadata {input.query_metadata} --mapping_mnn {input.mapping_mnn} --outfile {output} > {log}"

##########################
## Plot mapping results ##
##########################

rule plot_mapping_results: 
    input:
        script = config["scripts"]["plot_mapping_results"],
        query_metadata=rules.parse_mapping_results.output,
        atlas_metadata = config["directories"]["atlas"]+"/sample_metadata.txt.gz"
    output:
        config["directories"]["results"]+"/mapping/pdf/completed.txt"
    params:
        outdir = config["directories"]["results"]+"/mapping/pdf"
    conda:
        "environment.yaml"
    log: 
        "logs/plot_mapping_results.log"
    threads: 
        config["slurm"]["plot_mapping_results"]["threads"]
    resources:
        mem_mb = config["slurm"]["plot_mapping_results"]["memory"]        
    shell:
        "Rscript {input.script} --query_metadata {input.query_metadata} --atlas_metadata {input.atlas_metadata} \
        --outdir {params.outdir} > {log}"

################################
## Plot cell type proportions ##
################################

rule plot_celltype_proportions: 
    input:
        script = config["scripts"]["plot_celltype_proportions"],
        metadata=rules.parse_mapping_results.output
    output:
        config["directories"]["results"]+"/celltype_proportions/completed.txt"
    params:
        celltype_label = config["params"]["plot_celltype_proportions"]["celltype_label"],
        outdir = config["directories"]["results"]+"/celltype_proportions"
    conda:
        "environment.yaml"
    log: 
        "logs/plot_celltype_proportions.log"
    threads: 
        config["slurm"]["plot_celltype_proportions"]["threads"]
    resources:
        mem_mb = config["slurm"]["plot_celltype_proportions"]["memory"]        
    shell:
        "Rscript {input.script} --metadata {input.metadata} --celltype_label {params.celltype_label} \
        --outdir {params.outdir} > {log}"

rule compare_celltype_proportions: 
    input:
        script = config["scripts"]["compare_celltype_proportions"],
        metadata = rules.parse_mapping_results.output
    output:
        config["directories"]["results"] + "/celltype_proportions/comparisons/completed.txt"
    params:
        celltype_label = config["params"]["compare_celltype_proportions"]["celltype_label"],
        outdir = config["directories"]["results"]+"/celltype_proportions/comparisons"
    conda:
        "environment.yaml"
    log: 
        "logs/compare_celltype_proportions.log"
    threads: 
        config["slurm"]["compare_celltype_proportions"]["threads"]
    resources:
        mem_mb = config["slurm"]["compare_celltype_proportions"]["memory"]        
    shell:
        "Rscript {input.script} --metadata {input.metadata} --celltype_label {params.celltype_label} \
        --outdir {params.outdir} > {log}"


##############################
## Dimensionality reduction ##
##############################

rule dimensionality_reduction_sce_class: 
    input:
        script = config["scripts"]["dimensionality_reduction_sce"],
        sce = rules.seurat_to_sce.output,
        metadata = rules.parse_mapping_results.output
    output:
        config["directories"]["results"]+"/dimensionality_reduction/sce/{classe}/completed.txt"
    params:
        outdir = config["directories"]["results"]+"/dimensionality_reduction/sce/{classe}",
        n_neighbors = config["params"]["dimensionality_reduction_sce"]["n_neighbors"],
        min_dist = config["params"]["dimensionality_reduction_sce"]["min_dist"],
        vars_to_regress = config["params"]["dimensionality_reduction_sce"]["vars_to_regress"],
        npcs = config["params"]["dimensionality_reduction_sce"]["npcs"],
        features = config["params"]["dimensionality_reduction_sce"]["features"],
        colour_by = config["params"]["dimensionality_reduction_sce"]["colour_by"]
    conda:
        "environment.yaml"
    log: 
        "logs/dimensionality_reduction_sce_{classe}.log"
    threads: 
        config["slurm"]["dimensionality_reduction_sce"]["threads"]
    resources:
        mem_mb = config["slurm"]["dimensionality_reduction_sce"]["memory"]
    shell:
        "Rscript {input.script} --sce {input.sce} --metadata {input.metadata} --classes {wildcards.classe} --npcs {params.npcs} --features {params.features} \
        --vars_to_regress {params.vars_to_regress} --n_neighbors {params.n_neighbors} --min_dist {params.min_dist} --colour_by {params.colour_by} --outdir {params.outdir} > {log}"


rule dimensionality_reduction_seurat_class: 
    input:
        script = config["scripts"]["dimensionality_reduction_seurat"],
        seurat = rules.create_seurat.output.seurat,
        metadata = rules.parse_mapping_results.output
    output:
        config["directories"]["results"]+"/dimensionality_reduction/seurat/{classe}/completed.txt"
    params:
        outdir = config["directories"]["results"]+"/dimensionality_reduction/seurat/{classe}",
        n_neighbors = config["params"]["dimensionality_reduction_seurat"]["n_neighbors"],
        min_dist = config["params"]["dimensionality_reduction_seurat"]["min_dist"],
        vars_to_regress = config["params"]["dimensionality_reduction_seurat"]["vars_to_regress"],
        npcs = config["params"]["dimensionality_reduction_seurat"]["npcs"],
        features = config["params"]["dimensionality_reduction_seurat"]["features"],
        colour_by = config["params"]["dimensionality_reduction_seurat"]["colour_by"]
    conda:
        "environment.yaml"
    log: 
        "logs/dimensionality_reduction_seurat_{classe}.log"
    threads: 
        config["slurm"]["dimensionality_reduction_seurat"]["threads"]
    resources:
        mem_mb = config["slurm"]["dimensionality_reduction_seurat"]["memory"]
    shell:
        "Rscript {input.script} --seurat {input.seurat} --metadata {input.metadata} --classes {wildcards.classe} --npcs {params.npcs} --features {params.features} \
        --vars_to_regress {params.vars_to_regress} --n_neighbors {params.n_neighbors} --min_dist {params.min_dist} --colour_by {params.colour_by} --outdir {params.outdir} > {log}"


################
## Pseudobulk ##
################

# rule pseudobulk_rna:
#     input:
#         # seurat = rules.create_seurat.output.seurat,
#         sce = rules.seurat_to_sce.output,
#         metadata = rules.parse_mapping_results.output,
#         script = config["scripts"]["pseudobulk_rna"]
#     output:
#         seurat = config["directories"]["results"]+"/pseudobulk/Seurat_pseudobulk_{group_by}.rds",
#         sce = config["directories"]["results"]+"/pseudobulk/SingleCellExperiment_pseudobulk_{group_by}.rds"
#     params:
#         normalisation_method = config["params"]["pseudobulk_rna"]["normalisation_method"],
#         outdir = config["directories"]["results"]+"/pseudobulk"
#         # group_by=config["pseudobulk"]["group_by"]
#     conda:
#         "environment.yaml"
#     log: 
#         "logs/pseudobulk_rna_{group_by}.log"
#     threads: 
#         config["slurm"]["pseudobulk_rna"]["threads"]
#     resources:
#         mem_mb = config["slurm"]["pseudobulk_rna"]["memory"]
#     shell:
#         "Rscript {input.script} --sce {input.sce} --metadata {input.metadata} --group_by {wildcards.group_by} \
#         --normalisation_method {params.normalisation_method} --outdir {params.outdir} > {log}"


####################
## Sex assignment ##
####################

rule sex_assignment: 
    input:
        script = config["scripts"]["sex_assignment"],
        metadata = rules.parse_mapping_results.output,
        sce = rules.seurat_to_sce.output
    output:
        config["directories"]["results"]+"/sex_assignment/sample_metadata_after_sex_assignment.txt.gz",
        config["directories"]["results"]+"/sex_assignment/sex_assignment.txt.gz"
    params:
        samples = expand("{sample}", sample=config["samples"]),
        chrY_ratio_threshold = config["params"]["sex_assignment"]["chrY_ratio_threshold"],
        outdir = config["directories"]["results"]+"/sex_assignment"
    conda:
        "environment.yaml"
    log: 
        "logs/sex_assignment.log"
    threads: 
        config["slurm"]["sex_assignment"]["threads"]
    resources:
        mem_mb = config["slurm"]["sex_assignment"]["memory"]        
    shell:
        "Rscript {input.script} --metadata {input.metadata} --sce {input.sce} --samples {params.samples} \
        --chrY_ratio_threshold {params.chrY_ratio_threshold} --outdir {params.outdir} > {log}"

