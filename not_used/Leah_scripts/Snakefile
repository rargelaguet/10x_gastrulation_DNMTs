configfile: "config.yaml"

shell("mkdir -p " + config["directories"]["base"]+config["directories"]["errfiles"])
shell("mkdir -p " + config["directories"]["base"]+config["directories"]["outfiles"])
for r in ["CreateSeurat", "Mapping", "Plotting"]:
    shell("mkdir -p " + config["directories"]["base"]+config["directories"]["errfiles"] + r + "/")
    shell("mkdir -p " + config["directories"]["base"]+config["directories"]["outfiles"] + r + "/")


rule all:
    input:
        expand( config["directories"]["base"]+config["directories"]["extention"]+"results/mapping/second_batch/pdf/mockfile.{method}.{sample}.txt", sample=config["types"]["second_batch"], method=config["mapping_methods"] ),
        expand( config["directories"]["base"]+config["directories"]["extention"]+"results/mapping/third_batch/pdf/mockfile.{method}.{sample}.txt", sample=config["types"]["third_batch"], method=config["mapping_methods"] ),
        expand( config["directories"]["base"]+config["directories"]["extention"]+"results/mapping/fourth_batch/pdf/mockfile.{method}.{sample}.txt", sample=config["types"]["fourth_batch"], method=config["mapping_methods"] )
        


rule CreateSeurat:
    input:
        script=config["scripts"]["CreateSeurat"],
        dir=lambda wildcards: config["directories"]["base"]+config["directories"]["extention"]+"original/{experiment}/",
        sets=config["settings"]["CreateSeurat"]
    output:
        seurat=config["directories"]["base"]+config["directories"]["extention"]+"processed/{experiment}/seurat.rds",
        metadata=config["directories"]["base"]+config["directories"]["extention"]+"processed/{experiment}/sample_metadata.txt",
        genemetadata=config["directories"]["base"]+config["directories"]["extention"]+"processed/{experiment}/gene_metadata.txt"
    params:
        memory=config["lsf"]["CreateSeurat"]["memory"],
        rusage=config["lsf"]["CreateSeurat"]["rusage"],
        other=config["lsf"]["CreateSeurat"]["other"],
        outfile = config["directories"]["base"]+config["directories"]["outfiles"]+"CreateSeurat/{experiment}.txt",
        errfile = config["directories"]["base"]+config["directories"]["errfiles"]+"CreateSeurat/{experiment}.txt"
    shell:
        "{input.script} -i {input.dir} -S {input.sets} -O {output.seurat} -o {output.metadata} -g {output.genemetadata} -e {wildcards.experiment}"


rule Mapping:
    input:
        script=config["directories"]["base"]+config["directories"]["mapping_scripts"]+"{method}/mapping_{method}.R",
        query=rules.CreateSeurat.output.seurat,
        meta=rules.CreateSeurat.output.metadata,
        sets=config["settings"]["Mapping"],
        fns=config["functions"]["Mapping"],
        atlasrds=config["directories"]["atlas"]+"sce_atlas.rds",
        atlasmd=config["directories"]["atlas"]+"atlas_metadata.txt.gz"
    output:
        rds=config["directories"]["base"]+config["directories"]["extention"]+"results/mapping/{experiment}/mapping/{method}/mapping_{method}_{sample}.rds",
        txtgz=config["directories"]["base"]+config["directories"]["extention"]+"results/mapping/{experiment}/mapping/{method}/mapping_{method}_{sample}.txt.gz"
    params:
        memory=lambda wildcards: config["lsf"]["Mapping"]["memory"][wildcards.method],
        rusage=lambda wildcards: config["lsf"]["Mapping"]["rusage"][wildcards.method],
        other=lambda wildcards: config["lsf"]["Mapping"]["other"][wildcards.method],
        outfile = config["directories"]["base"]+config["directories"]["outfiles"]+"Mapping/{experiment}_{method}_{sample}.txt",
        errfile = config["directories"]["base"]+config["directories"]["errfiles"]+"Mapping/{experiment}_{method}_{sample}.txt"
    run:
        b = wildcards.sample
        shell("{input.script} -A {input.atlasrds} -a {input.atlasmd} -Q {input.query} -q {input.meta} -e {wildcards.experiment} -b "+b+" -S {input.sets} -f {input.fns} -O {output.rds} -o {output.txtgz}")


rule Plotting:
    input:
        script=config["scripts"]["Plotting"],
        rds=rules.Mapping.output.rds,
        meta=rules.Mapping.output.txtgz,
        query=rules.CreateSeurat.output.metadata,
        atlas=config["directories"]["atlas"]+"atlas_metadata.txt.gz",
        sets=config["settings"]["Plotting"]
    output:
        config["directories"]["base"]+config["directories"]["extention"]+"results/mapping/{experiment}/pdf/mockfile.{method}.{sample}.txt"
    params:
        memory=config["lsf"]["Plotting"]["memory"],
        other=config["lsf"]["Plotting"]["other"],
        rusage=config["lsf"]["Plotting"]["rusage"],
        outdir=config["directories"]["base"]+config["directories"]["extention"]+"results/mapping/{experiment}/pdf/{sample}/",
        ext="{method}_{sample}",
        outfile = config["directories"]["base"]+config["directories"]["outfiles"]+"Plotting/{experiment}_{method}_{sample}.txt",
        errfile = config["directories"]["base"]+config["directories"]["errfiles"]+"Plotting/{experiment}_{method}_{sample}.txt"
    shell:
        """
        mkdir -p {params.outdir}
        {input.script} -R {input.rds} -m {input.meta} -q {input.query} -a {input.atlas} -S {input.sets} -O {params.outdir}{params.ext}
        touch {output}
        """
